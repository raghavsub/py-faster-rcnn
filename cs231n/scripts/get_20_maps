#! /usr/bin/env python

import os
import cPickle as pickle
import matplotlib.pyplot as plt
import sys

def main():
    
    for metric in ['5', '59']:
        for prefix in ['vanilla_20', 'robust_0', 'robust_5', 'robust_10', 'robust_20', 'robust2_1020']:

            if prefix == 'vanilla_20':
                label = 'Smooth L1'
            if prefix == 'robust_0':
                label = 'L1'
            if prefix == 'robust_5':
                label = 'Robust L1 (5%)'
            if prefix == 'robust_10':
                label = 'Robust L1 (10%)'
            if prefix == 'robust_20':
                label = 'Robust L1 (20%)'
            if prefix == 'robust2_1020':
                label = 'Robust L1 (10% xy, 20% wh)'

            if metric == '5':
                map_idx = 1
                map_name = 'mAP@.5'
            if metric == '59':
                map_idx = 0
                map_name = 'mAP@[.5, .95]'

            if not os.path.exists(os.path.join('cs231n', 'models', prefix)):
                print('Bad arguments')
                sys.exit(1)

            net = os.path.join('output', 'cs231n', 'coco_2014_valminusminival',
                               prefix + '_iter_70000.caffemodel')
            if not os.path.exists(net):
                print('Not trained')
                sys.exit(1)

            results_file = os.path.join('output', 'cs231n', 'coco_2014_minival',
                                        prefix + '_iter_70000',
                                        'detection_results.pkl')

            with open(results_file, 'rb') as f:
                E = pickle.load(f)

            map_ = E.stats[map_idx] * 100

            print('{} Loss, 20% Jitter, {} = {}'.format(label, map_name, map_))

if __name__ == '__main__':
    main()
