#! /usr/bin/env python

import os
os.environ['GLOG_minloglevel'] = '2'

import caffe
import copy
import cv2
import numpy as np
import random
import sys
import tempfile

from datasets.coco import coco

def main():

    caffe.set_mode_gpu()
    caffe.set_device(0)

    imdb = coco('valminusminival', '2014')
    idx = imdb._image_index[3]
    label = imdb._load_coco_annotation(idx)['boxes'][0]
    im = cv2.imread(imdb.image_path_from_index(idx))

    net_file = vanilla_net_file()
    vanilla_net = caffe.Net(net_file, caffe.TEST)
    os.remove(net_file)

    worst_vanilla_loss = 0.

    for i in range(500):
        pred = jitter(im, label)
        p_pred, p_label = parameterize(pred, label)
        vanilla_net.blobs['label'].data[...] = p_pred
        vanilla_net.blobs['pred'].data[...] = p_label
        vanilla_net.blobs['inside'].data[...] = np.ones(4)
        vanilla_net.blobs['outside'].data[...] = np.ones(4)
        vanilla_net.forward()
        vanilla_loss = float(vanilla_net.blobs['loss'].data[...])
        if vanilla_loss > worst_vanilla_loss:
            worst_vanilla_loss = vanilla_loss

    print('worst vanilla loss: {}'.format(worst_vanilla_loss))

    for width in [0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4]:

        net_file = robust_net_file(width)
        robust_net = caffe.Net(net_file, caffe.TEST)
        os.remove(net_file)

        worst_robust_loss = 0.

        for i in range(500):
            pred = jitter(im, label)
            p_pred, p_label = parameterize(pred, label)
            robust_net.blobs['label'].data[...] = p_pred
            robust_net.blobs['pred'].data[...] = p_label
            robust_net.forward()
            robust_loss = float(robust_net.blobs['loss'].data[...])
            if robust_loss > worst_robust_loss:
                worst_robust_loss = robust_loss

        print('{} width; worst robust loss: {}'.format(width, 
                                                       worst_robust_loss))

def robust_net_file(width):
    netStr = """ 
        name: "test"
        input: "pred"
        input_shape { dim: 1 dim: 4 }
        input: "label"
        input_shape { dim: 1 dim: 4 }
        layer {
            name: "loss"
            type: "Python"
            bottom: "pred"
            bottom: "label"
            top: "loss"
            python_param {
                module: "robust_loss_layer.layer"
                layer: "RobustL1LossLayer"
                param_str: "--width=""" + str(width) + """"
            }
        }"""
    with tempfile.NamedTemporaryFile(mode='w+', delete=False) as f:
        f.write(netStr)
    return f.name

def vanilla_net_file():
    netStr = """ 
        name: "test"
        input: "pred"
        input_shape { dim: 1 dim: 4 }
        input: "label"
        input_shape { dim: 1 dim: 4 }
        input: "inside"
        input_shape { dim: 1 dim: 4 }
        input: "outside"
        input_shape { dim: 1 dim: 4 }
        layer {
            name: "loss"
            type: "SmoothL1Loss"
            bottom: "pred"
            bottom: "label"
            bottom: "inside"
            bottom: "outside"
            top: "loss"
        }"""
    with tempfile.NamedTemporaryFile(mode='w+', delete=False) as f:
        f.write(netStr)
    return f.name

def jitter(im, box):
    box = copy.deepcopy(box)
    r = lambda: 2 * random.random() * 0.2 - 0.2
    height, width = im.shape[0], im.shape[1]
    jitterX = r() * (box[2] - box[0])
    jitterY = r() * (box[3] - box[1])
    jitterW = r() * (box[2] - box[0])
    jitterH = r() * (box[3] - box[1])
    box[0] += jitterX
    box[1] += jitterY
    box[2] += jitterX
    box[3] += jitterY
    box[0] -= jitterW / 2
    box[1] -= jitterH / 2
    box[2] += jitterW / 2
    box[3] += jitterH / 2
    box[0:4] = [int(round(val)) for val in box[0:4]]
    if box[0] < 0:
        box[0] = 0
    if box[1] < 0:
        box[1] = 0
    if box[2] >= width:
        box[2] = width-1
    if box[3] >= height:
        box[3] = height-1
    return box

def parameterize(pred, label):
    pred = [float(val) for val in pred]
    x1, y1, x2, y2 = pred
    x = (x1 + x2) / 2
    y = (y1 + y2) / 2
    h = (x2 - x1)
    w = (y2 - y1)
    label = [float(val) for val in label]
    x1, y1, x2, y2 = label
    xa = (x1 + x2) / 2
    ya = (y1 + y2) / 2
    ha = (x2 - x1)
    wa = (y2 - y1)
    tx = (x - xa) / wa
    ty = (y - ya) / wa
    tw = np.log(w / wa)
    th = np.log(h / ha)
    p_pred = np.array([tx, ty, tw, th])
    p_label = np.zeros(4)
    return p_pred, p_label

if __name__ == '__main__':
    main()
