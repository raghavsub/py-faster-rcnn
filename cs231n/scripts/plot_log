#! /usr/bin/env python

from collections import defaultdict
import numpy as np
import os
import matplotlib.pyplot as plt
import sys

def main():
    lossfunc = sys.argv[1] # vanilla or robust
    num = sys.argv[2] # as a percent

    prefix = lossfunc + '_' + num
    if not os.path.exists(os.path.join('cs231n', 'models', prefix)):
        print('Bad arguments')
        sys.exit(1)

    net = os.path.join('output', 'cs231n', 'coco_2014_valminusminival',
                       prefix + '_iter_70000.caffemodel')
    if not os.path.exists(net):
        print('Not trained')
        sys.exit(1)

    log_file = os.path.join('cs231n', 'logs', prefix + '.log')

    train_losses = defaultdict(list)
    with open(log_file, 'r') as f:
        for line in f:
            if 'net output' in line:
                loss = float(line.split()[10])
                label = line.split()[8]
                train_val = line.split()[4]
                if train_val == 'Train':
                    train_losses[label].append(loss)

    train_iters = 20 * np.arange(len(train_losses[train_losses.keys()[0]]))

    def _pp_label(label):
        if label == 'loss_bbox':
            return 'BBox Loss'
        if label == 'loss_cls':
            return 'Class Loss'
        if label == 'rpn_loss_bbox':
            return 'RPN BBox Loss'
        if label == 'rpn_cls_loss':
            return 'RPN Class Loss'

    fig, ax = plt.subplots(2, 2)
    for i, label in enumerate(train_losses):
        r = i / 2
        c = i % 2
        ax[r, c].plot(train_iters, train_losses[label])
        ax[r, c].set_xlabel('Iteration')
        ax[r, c].set_xlim(xmin=0)
        ax[r, c].set_ylabel(_pp_label(label))
        ax[r, c].grid()
    plt.tight_layout()
    plt.subplots_adjust(top=0.92)
    if lossfunc == 'vanilla':
        fig.suptitle('Smooth L1 Loss, {}% Jitter'.format(num))
    if lossfunc == 'robust':
        fig.suptitle('Robust L1 Loss ({}%), 20% Jitter'.format(num))
    if lossfunc == 'robust2':
        fig.suptitle('Robust L1 Loss ({}% xy, {}% wh), 20% Jitter'.format(num[:2], num[2:]))
    fig.savefig(os.path.join('cs231n', 'plots', prefix + '_loss.png'))

if __name__ == '__main__':
    main()
